package com.frankie.demo.dp;

/**
 * @author: Yao Frankie
 * @date: 2020/5/27 13:29
 */
public class BuyAndSellStockLC {

    public static void main(String[] args) {
        p121();  // Best Time to Buy and Sell Stock 1
    }

    /**
     * Best Time to Buy and Sell Stock 1
     *
     */
    private static void p121() {
        int[] prices = {3, 2, 8};
        maxProfit(prices);
    }

    /**
     * https://labuladong.gitbook.io/algo/dong-tai-gui-hua-xi-lie/tuan-mie-gu-piao-wen-ti
     * ----------------------------------------------------------------------------
     * dp[i][k][0/1]: 在第i天，是否持有股票的情况下，最多允许k次操作可以获取最大的利润。
     * eg: dp[3][2][0]：现在是第3天，我现在手头未持有股票，最多允许2次操作可以获得最大的利润。
     * eg: dp[8][3][1]：现在是第8天，我现在手头已持有股票，最多允许3次操作可以获得最大的利润。
     * Target = dp[N-1][K][0]
     * ----------------------------------------------------------------------------
     * 选择：买入[Buy]、卖出[Sell]、无操作[Rest]
     * 状态：天数、允许交易的最大次数、当前的持有状态。
     * ----------------------------------------------------------------------------
     * dp[i][k][0] = max(dp[i-1][k][0], dp[i-1][k][1] + prices[i])
     *               max(    rest     ,            sell          )
     * 今天我没有持有股票的原因：
     * 1. 我昨天就没有买股票。
     * 2. 我昨天买了股票，但是我今天卖了。
     * ----------------------------------------------------------------------------
     * dp[i][k][1] = max(dp[i-1][k][1], dp[i-1][k][0] - prices[i])
     *               max(    rest     ,            buy           )
     * 今天我持有股票的原因：
     * 1. 我昨天就买股票。
     * 2. 我昨天未持有股票，但是我今天买了。
     * ----------------------------------------------------------------------------
     * Base case
     * 1. dp[-1][k][0] = 0， 证券交易所还没开门。
     * 2. dp[-1][k][1] = -1，不可能，证券交易所还没开门，你怎么买的股票。
     * 3. dp[i][0][0]  = 0， 如果不允许你交易，当天利润肯定是0。
     * 4. dp[i][0][1] = -1， 不允许交易的情况下，是不可能持有股票的。
     * ----------------------------------------------------------------------------
     */
    private static int maxProfit(int[] prices) {
        return 0;
    }
}
